##############
# --------- #
# vpc.yml  #
# ------- #
########################################################################################################################
# What the fuck is this?
#####
---
AWSTemplateFormatVersion: 2010-09-09
Description: Temporary, single-tenant VPC for EC2 gaming

Metadata:
  cfn-lint:
    config:
      ignore_checks: []
        #- E3005

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: {default: General Configuration}
        Parameters:
          - AzIndex
          - CidrSize
          - CidrSubnetId

    ParameterLabels:
      AzIndex:
        default: Which AZ should VPC Subnets and EBS Volumes be placed?
      CidrSize:
        default: How big should the CIDR range be?
      CidrSubnetId:
        default: What should the CIDR subnet ID be?

Parameters:
  AzIndex:
    Default: 0
    MaxValue: 5
    MinValue: 0
    Type: Number

  CidrSize:
    Type: Number
    ConstraintDescription: must be 16-28
    Default: 27
    Description: CIDR size
    MaxValue: 28
    MinValue: 16

  CidrSubnetId:
    Type: String
    AllowedPattern: '^\d+\.\d+\.\d+\.\d+$'
    ConstraintDescription: must be valid CIDR range
    Default: 10.17.0.0
    Description: CIDR subnet id (ie. first address)
  
  IamPath:
    Type: String
    Default: /

  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0f5761c546ea1265a

Outputs:
  Ipv6CidrBlocks:
    Export:
      Name: !Sub ${AWS::StackName}:Ipv6CidrBlocks
    Value: !Join [',', !GetAtt Vpc.Ipv6CidrBlocks]
        
  LaunchTemplateId:
    Export:
      Name: !Sub ${AWS::StackName}:LaunchTemplateId
    Value: !Ref LaunchTemplate
  LaunchTemplateLatestVersionNumber:
    Export:
      Name: !Sub ${AWS::StackName}:LaunchTemplateLatestVersionNumber
    Value: !GetAtt LaunchTemplate.LatestVersionNumber

  SubnetAAvailabilityZone:
    Export:
      Name: !Sub ${AWS::StackName}:SubnetAAvailabilityZone
    Value: !GetAtt SubnetA.AvailabilityZone

  SubnetAId:
    Export:
      Name: !Sub ${AWS::StackName}:SubnetA
    Value: !Ref SubnetA

  VpcCidrBlock:
    Export:
      Name: !Sub ${AWS::StackName}:CidrBlock
    Value: !GetAtt Vpc.CidrBlock

  VpcDefaultNetworkAcl:
    Export:
      Name: !Sub ${AWS::StackName}:DefaultNetworkAcl
    Value: !GetAtt Vpc.DefaultNetworkAcl

  VpcDefaultSecurityGroup:
    Export:
      Name: !Sub ${AWS::StackName}:DefaultSecurityGroup
    Value: !GetAtt Vpc.DefaultSecurityGroup

  VpcId:
    Description: VPC Id
    Export:
      Name: !Sub ${AWS::StackName}:VpcId
    Value: !Ref Vpc

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${CidrSubnetId}/${CidrSize}
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}:${AWS::Region}

  Ipv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref Vpc

  Igw:
    Type: AWS::EC2::InternetGateway

  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}:${AWS::Region}
      VpcId: !Ref Vpc

  DefaultRoute4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
      RouteTableId: !Ref RouteTable

  DefaultRoute6:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref Igw
      RouteTableId: !Ref RouteTable

  SubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6CidrBlock
    Properties:
      #AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ !Ref AzIndex, !GetAZs '' ]
      CidrBlock: !GetAtt Vpc.CidrBlock
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          -
            SubnetPart: '01::/64'
            VpcPart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt Vpc.Ipv6CidrBlocks]]]
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Sub
            - ${AWS::StackName}:${AWS::Region}:${Az}
            -
              Az: !Select [!Ref AzIndex, !GetAZs '']
      VpcId: !Ref Vpc

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  
  IamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: sts:AssumeRole
      Description: !Ref AWS::StackName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: !Ref IamPath

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref IamInstanceRole
      Path: !Ref IamPath
      Roles: [!Ref IamInstanceRole]
       
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        # TODO Actually use this disk
        #BlockDeviceMappings:
        #  -
        #    DeviceName: xvdg
        #    Ebs:
        #      # Star Citizen requires ~65GB
        #      # Ref: https://support.robertsspaceindustries.com/hc/en-us/articles/360042417374-Star-Citizen-Minimum-System-Requirements
        #      VolumeSize: 80
        #ElasticGpuSpecifications
        # TODO Enable volume encryption before hibernation can be enabled
        #HibernationOptions:
        #  Configured: true
        IamInstanceProfile:
          Arn: !GetAtt IamInstanceProfile.Arn
        ImageId: !Ref ImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: terminate
            SpotInstanceType: one-time
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              -
                Key: Name
                Value: !Sub ${AWS::StackName}:${AWS::Region}:${SubnetA}
      LaunchTemplateName: !Ref AWS::StackName

# vim:expandtab:ft=cloudformation.yaml:sts=2:sw=2:ts=2
